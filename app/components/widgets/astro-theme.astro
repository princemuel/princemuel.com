<astro-theme class="flex items-center justify-center">
  <button
    type="button"
    title="Toggle Theme"
    class="relative text-2xl text-gray-600 transition-transform delay-200 duration-200 ease-in"
  >
    <span class="sr-only">Toggle theme</span>
  </button>
</astro-theme>

{/* Inlined to avoid FOUC. Uses global scope from `theme-provider.astro` */}
<script is:inline>
  window.ThemeProvider.updateWidget();
</script>

<script>
  import { create_custom_el } from "@/helpers/custom-elements";
  import { getElement } from "@/helpers/dom";

  type Theme = (typeof themes)[number];

  const storageKey = "x-theme";
  const mql = matchMedia("(prefers-color-scheme: light)");
  const themes = ["auto", "dark", "light"] as const;

  /** Yield the next theme, looping back to the first after reaching the end. */
  const themeGenerator = (function* () {
    let index = 1;
    while (true) {
      yield themes[index];
      index = (index + 1) % themes.length;
    }
  })();

  /** Get the preferred system color scheme. */
  const getPreferredColorScheme = (): Theme => (mql.matches ? "light" : "dark");
  const loadTheme = (): Theme =>
    parseTheme(typeof localStorage !== "undefined" && localStorage.getItem(storageKey));
  function storeTheme(theme: Theme): void {
    if (typeof localStorage !== "undefined") {
      localStorage.setItem(
        storageKey,
        theme === "light" || theme === "dark" ? theme : "",
      );
    }
  }

  const parseTheme = (theme: unknown): Theme =>
    theme === "auto" || theme === "dark" || theme === "light" ? theme : "auto";

  /** Update theme widget, document theme, and local storage state. */
  function onThemeChange(theme: Theme): void {
    window.ThemeProvider.updateWidget(theme);
    document.documentElement.dataset.theme =
      theme === "auto" ? getPreferredColorScheme() : theme;
    document.documentElement.dataset.readerTheme =
      theme === "auto"
        ? getPreferredColorScheme() === "light"
          ? "github-light-default"
          : "github-dark-default"
        : theme === "light"
          ? "github-light-default"
          : "github-dark-default";

    storeTheme(theme);
  }

  // React to changes in system color scheme.
  mql.addEventListener("change", () => {
    if (loadTheme() === "auto") onThemeChange("auto");
  });

  class ThemeWidget extends HTMLElement {
    constructor() {
      super();
      onThemeChange(loadTheme());
      const btn = getElement("button", HTMLButtonElement, this);

      btn.addEventListener("click", (e) => {
        if (e.currentTarget instanceof HTMLButtonElement) {
          onThemeChange(parseTheme(themeGenerator.next().value));
        }
      });
    }
  }
  create_custom_el("astro-theme", ThemeWidget);
</script>

<div id="pwa-toast" role="alert" aria-labelledby="toast-message">
  <div class="message">
    <span id="toast-message"></span>
  </div>
  <button id="pwa-refresh">Reload</button>
  <button id="pwa-close">Close</button>
</div>

<script>
  import { getElement } from "@/helpers/dom";

  import { registerSW } from "virtual:pwa-register";

  const period = 1.5 * 24 * 60 * 60 * 1000; // check for updates every day

  window.addEventListener("load", () => {
    let swActivated = false;

    const pwaToast = getElement("#pwa-toast", HTMLDivElement);
    const pwaToastMessage = getElement("#toast-message", HTMLSpanElement);
    const pwaCloseBtn = getElement("#pwa-close", HTMLButtonElement);
    const pwaRefreshBtn = getElement("#pwa-refresh", HTMLButtonElement);

    let refreshSW: ((reloadPage?: boolean) => Promise<void>) | undefined;

    const refreshCallback = () => refreshSW?.(true);

    const hidePwaToast = (raf = false) => {
      if (raf) {
        requestAnimationFrame(() => hidePwaToast(false));
        return;
      }
      if (pwaToast.classList.contains("refresh"))
        pwaRefreshBtn.removeEventListener("click", refreshCallback);

      pwaToast.classList.remove("show", "refresh");
    };

    const showPwaToast = (offline: boolean) => {
      if (!offline) pwaRefreshBtn.addEventListener("click", refreshCallback);
      requestAnimationFrame(() => {
        hidePwaToast(false);
        if (!offline) pwaToast.classList.add("refresh");
        pwaToast.classList.add("show");
      });
    };

    pwaCloseBtn.addEventListener("click", () => hidePwaToast(true));

    registerSW({
      immediate: true,
      onOfflineReady() {
        pwaToastMessage.innerHTML =
          "[Vite Plugin PWA] PWA application ready to work offline";
        showPwaToast(true);
      },
      onNeedRefresh() {
        pwaToastMessage.innerHTML = "[Vite Plugin PWA] PWA application needs an update";
        showPwaToast(false);
      },
      onRegisteredSW(swUrl, r) {
        if (period <= 0) return;
        if (r?.active?.state === "activated") {
          swActivated = true;
          sync(period, swUrl, r);
          console.info(`[Vite Plugin PWA] SW registered: ${swUrl} after activation`);
        } else if (r?.installing) {
          r.installing.addEventListener("statechange", (e) => {
            const sw = e.target as ServiceWorker;
            swActivated = sw.state === "activated";
            if (swActivated) sync(period, swUrl, r);
            console.info(`[Vite Plugin PWA] SW registered: ${swUrl} after installing`);
          });
        }
      },
    });
  });

  /**
   * This `sync` function will check for updates
   * according to the period interval specified
   */
  function sync(period: number, url: string, r: ServiceWorkerRegistration) {
    if (period <= 0) return;

    setInterval(async () => {
      if ("onLine" in navigator && !navigator.onLine) return;

      const response = await fetch(url, {
        cache: "no-store",
        headers: { cache: "no-store", "cache-control": "no-cache" },
      });
      if (response?.status === 200) await r.update();
    }, period);
  }
</script>

<style>
  #pwa-toast {
    visibility: hidden;
    position: fixed;
    right: 0;
    bottom: 0;
    margin: 1rem;
    padding: 0.75rem;
    border: 1px solid #8885;
    border-radius: 4px;
    z-index: 1;
    text-align: left;
    box-shadow: 3px 4px 5px 0 #8885;
  }
  #pwa-toast .message {
    margin-bottom: 0.5rem;
  }
  #pwa-toast button {
    border: 1px solid #8885;
    outline: none;
    margin-right: 5px;
    border-radius: 2px;
    padding: 3px 0.62rem;
  }
  #pwa-toast.show {
    visibility: visible;
  }
  button#pwa-refresh {
    display: none;
  }
  #pwa-toast.show.refresh button#pwa-refresh {
    display: inline-block;
  }
</style>

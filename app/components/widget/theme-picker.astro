{/* Inlined to avoid FOUC. Uses global scope from `theme-provider.astro` */}
<script is:inline>
  globalThis.theme.pick();
</script>

<theme-picker class="contents">
  <button class="" title="Toggle Theme" type="button">
    <span class="sr-only">Toggle theme</span>
  </button>
</theme-picker>

<script>
  import { $, register_el } from "@/helpers/dom";

  type Theme = (typeof themes)[number];

  const storageKey = "x-theme";
  const mql = matchMedia("(prefers-color-scheme: light)");
  const themes = ["auto", "dark", "light"] as const;
  /** Yield the next theme, looping back to the first after reaching the end. */
  const themeGenerator = (function* theme() {
    let index = 0;
    while (true) {
      yield themes[index];
      index = (index + 1) % themes.length;
    }
  })();
  const getPreferredColorScheme = (): Theme => (mql.matches ? "light" : "dark");
  const parseTheme = (theme: unknown): Theme =>
    "auto" === theme || "dark" === theme || "light" === theme ? theme : "auto";
  const loadTheme = (): Theme =>
    parseTheme("undefined" !== typeof localStorage && localStorage.getItem(storageKey));
  const storeTheme = (theme: Theme) => {
    if ("undefined" !== typeof localStorage) {
      localStorage.setItem(storageKey, "light" === theme || "dark" === theme ? theme : "");
    }
  };
  /** Update theme widget, document theme, and local storage state. */
  const onThemeChange = (theme: Theme) => {
    globalThis.theme.pick(theme);
    document.documentElement.dataset.theme =
      "auto" === theme ? getPreferredColorScheme() : theme;
    document.documentElement.dataset.mode =
      "auto" === theme
        ? `github-${getPreferredColorScheme()}-default`
        : `github-${theme}-default`;
    storeTheme(theme);
  };
  // React to changes in system color scheme.
  mql.addEventListener("change", () => {
    if ("auto" === loadTheme()) onThemeChange("auto");
  });

  class AstroThemePicker extends HTMLElement {
    btn: HTMLButtonElement;
    handleClick: (e: MouseEvent) => void;
    constructor() {
      super();
      this.btn = $("button", HTMLButtonElement, this);
      this.handleClick = this.#handleThemeChange.bind(this);
    }

    connectedCallback() {
      onThemeChange(loadTheme());
      this.btn.addEventListener("click", this.handleClick);
    }

    #handleThemeChange(e: MouseEvent) {
      if (e.currentTarget instanceof HTMLButtonElement) {
        onThemeChange(parseTheme(themeGenerator.next().value));
      }
    }

    disconnectedCallback() {
      this.btn.removeEventListener("click", this.handleClick);
    }
  }

  register_el("theme-picker", AstroThemePicker);
</script>

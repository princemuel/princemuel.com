/**
 * Remembers and retrieves a value by a given name, or the value generated by `getValue` if the name doesn't exist.
 *
 * The return type is inferred from the return type of `getValue`.
 */
export function remember<T>(name: string, getValue: () => T) {
  const g = globalThis;
  g.__singletons__ ??= new Map();
  if (!g.__singletons__.has(name)) g.__singletons__.set(name, getValue());
  return g.__singletons__.get(name) as NonNullable<T>;
}

/**
 * Forgets a remembered value by a given name. Does not throw if the name doesn't exist.
 */
export function forget(name: string) {
  const g = globalThis;
  g.__singletons__ ??= new Map();
  return g.__singletons__.delete(name);
}
